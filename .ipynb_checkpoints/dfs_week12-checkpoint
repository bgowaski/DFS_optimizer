{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "import urllib, json\n",
    "import pandas as pd\n",
    "import re\n",
    "from itertools import permutations\n",
    "from pulp import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "col_names=[\"displayName\", \"salary\", \"team\", \"position\",\"opponent\",\"ceiling\",\"floor\",\"points\"]\n",
    "current = pd.read_csv('week12.csv', names=col_names, header=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>displayName</th>\n",
       "      <th>salary</th>\n",
       "      <th>team</th>\n",
       "      <th>position</th>\n",
       "      <th>opponent</th>\n",
       "      <th>ceiling</th>\n",
       "      <th>floor</th>\n",
       "      <th>points</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Ryan Tannehill</td>\n",
       "      <td>5300</td>\n",
       "      <td>TEN</td>\n",
       "      <td>QB</td>\n",
       "      <td>JAC</td>\n",
       "      <td>26.32973</td>\n",
       "      <td>5.75218</td>\n",
       "      <td>15.89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Dak Prescott</td>\n",
       "      <td>6000</td>\n",
       "      <td>DAL</td>\n",
       "      <td>QB</td>\n",
       "      <td>NEP</td>\n",
       "      <td>28.71792</td>\n",
       "      <td>7.72632</td>\n",
       "      <td>17.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Nick Foles</td>\n",
       "      <td>5400</td>\n",
       "      <td>JAC</td>\n",
       "      <td>QB</td>\n",
       "      <td>TEN</td>\n",
       "      <td>26.62387</td>\n",
       "      <td>5.44544</td>\n",
       "      <td>15.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Ryan Finley</td>\n",
       "      <td>4700</td>\n",
       "      <td>CIN</td>\n",
       "      <td>QB</td>\n",
       "      <td>PIT</td>\n",
       "      <td>20.17050</td>\n",
       "      <td>4.04600</td>\n",
       "      <td>11.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Sam Darnold</td>\n",
       "      <td>5800</td>\n",
       "      <td>NYJ</td>\n",
       "      <td>QB</td>\n",
       "      <td>OAK</td>\n",
       "      <td>26.98230</td>\n",
       "      <td>7.44983</td>\n",
       "      <td>16.97</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      displayName  salary team position opponent   ceiling    floor  points\n",
       "0  Ryan Tannehill    5300  TEN       QB      JAC  26.32973  5.75218   15.89\n",
       "1    Dak Prescott    6000  DAL       QB      NEP  28.71792  7.72632   17.64\n",
       "2      Nick Foles    5400  JAC       QB      TEN  26.62387  5.44544   15.47\n",
       "3     Ryan Finley    4700  CIN       QB      PIT  20.17050  4.04600   11.90\n",
       "4     Sam Darnold    5800  NYJ       QB      OAK  26.98230  7.44983   16.97"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "current.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>position</th>\n",
       "      <th>displayName</th>\n",
       "      <th>salary</th>\n",
       "      <th>points</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>306</th>\n",
       "      <td>QB</td>\n",
       "      <td>Aaron Rodgers</td>\n",
       "      <td>6000</td>\n",
       "      <td>18.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>307</th>\n",
       "      <td>QB</td>\n",
       "      <td>Baker Mayfield</td>\n",
       "      <td>5900</td>\n",
       "      <td>18.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>308</th>\n",
       "      <td>QB</td>\n",
       "      <td>Brandon Allen</td>\n",
       "      <td>4600</td>\n",
       "      <td>12.91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>309</th>\n",
       "      <td>QB</td>\n",
       "      <td>Carson Wentz</td>\n",
       "      <td>5600</td>\n",
       "      <td>17.72</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>310</th>\n",
       "      <td>QB</td>\n",
       "      <td>Dak Prescott</td>\n",
       "      <td>6000</td>\n",
       "      <td>17.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>311</th>\n",
       "      <td>QB</td>\n",
       "      <td>Daniel Jones</td>\n",
       "      <td>5700</td>\n",
       "      <td>15.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>312</th>\n",
       "      <td>QB</td>\n",
       "      <td>Derek Carr</td>\n",
       "      <td>6100</td>\n",
       "      <td>17.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>313</th>\n",
       "      <td>QB</td>\n",
       "      <td>Deshaun Watson</td>\n",
       "      <td>6500</td>\n",
       "      <td>20.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>314</th>\n",
       "      <td>QB</td>\n",
       "      <td>Drew Brees</td>\n",
       "      <td>6600</td>\n",
       "      <td>19.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>315</th>\n",
       "      <td>QB</td>\n",
       "      <td>Dwayne Haskins</td>\n",
       "      <td>4900</td>\n",
       "      <td>13.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>316</th>\n",
       "      <td>QB</td>\n",
       "      <td>Jacoby Brissett</td>\n",
       "      <td>6300</td>\n",
       "      <td>16.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>317</th>\n",
       "      <td>QB</td>\n",
       "      <td>Jameis Winston</td>\n",
       "      <td>6200</td>\n",
       "      <td>20.19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>318</th>\n",
       "      <td>QB</td>\n",
       "      <td>Jared Goff</td>\n",
       "      <td>5500</td>\n",
       "      <td>17.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>319</th>\n",
       "      <td>QB</td>\n",
       "      <td>Jeff Driskel</td>\n",
       "      <td>5500</td>\n",
       "      <td>17.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>320</th>\n",
       "      <td>QB</td>\n",
       "      <td>Jimmy Garoppolo</td>\n",
       "      <td>6100</td>\n",
       "      <td>18.08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    position      displayName  salary  points\n",
       "306       QB    Aaron Rodgers    6000   18.80\n",
       "307       QB   Baker Mayfield    5900   18.43\n",
       "308       QB    Brandon Allen    4600   12.91\n",
       "309       QB     Carson Wentz    5600   17.72\n",
       "310       QB     Dak Prescott    6000   17.64\n",
       "311       QB     Daniel Jones    5700   15.20\n",
       "312       QB       Derek Carr    6100   17.08\n",
       "313       QB   Deshaun Watson    6500   20.94\n",
       "314       QB       Drew Brees    6600   19.33\n",
       "315       QB   Dwayne Haskins    4900   13.55\n",
       "316       QB  Jacoby Brissett    6300   16.34\n",
       "317       QB   Jameis Winston    6200   20.19\n",
       "318       QB       Jared Goff    5500   17.33\n",
       "319       QB     Jeff Driskel    5500   17.43\n",
       "320       QB  Jimmy Garoppolo    6100   18.08"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "availables = current[[\"position\", \"displayName\", \"salary\",\n",
    "  \"points\"]].groupby([\"position\", \"displayName\", \"salary\",\n",
    "  \"points\"]).agg(\"count\")\n",
    "availables = availables.reset_index()\n",
    "availables[availables.position==\"QB\"].head(15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "salaries = {}\n",
    "points = {}\n",
    "for pos in availables.position.unique():\n",
    "    available_pos = availables[availables.position == pos]\n",
    "    salary = list(available_pos[[\"displayName\",\"salary\"]].set_index(\"displayName\").to_dict().values())[0]\n",
    "    point = list(available_pos[[\"displayName\",\"points\"]].set_index(\"displayName\").to_dict().values())[0]\n",
    "    salaries[pos] = salary\n",
    "    points[pos] = point"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "pos_num_available = {\n",
    "    \"QB\": 1,\n",
    "    \"RB\": 2,\n",
    "    \"WR\": 3,\n",
    "    \"TE\": 1,\n",
    "    \"FLEX\": 1,\n",
    "    \"DST\": 1\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "SALARY_CAP = 50000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "_vars = {k: LpVariable.dict(k, v, cat=\"Binary\") for k, v in points.items()}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "prob = LpProblem(\"Fantasy\", LpMaximize)\n",
    "rewards = []\n",
    "costs = []\n",
    "position_constraints = []\n",
    "# Setting up the reward\n",
    "for k, v in _vars.items():\n",
    "    costs += lpSum([salaries[k][i] * _vars[k][i] for i in v])\n",
    "    rewards += lpSum([points[k][i] * _vars[k][i] for i in v])\n",
    "    prob += lpSum([_vars[k][i] for i in v]) <= pos_num_available[k]\n",
    "    \n",
    "prob += lpSum(rewards)\n",
    "prob += lpSum(costs) <= SALARY_CAP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prob.solve()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "def summary(prob):\n",
    "    div = '---------------------------------------\\n'\n",
    "    print(\"Variables:\\n\")\n",
    "    score = str(prob.objective)\n",
    "    constraints = [str(const) for const in prob.constraints.values()]\n",
    "    for v in prob.variables():\n",
    "        score = score.replace(v.name, str(v.varValue))\n",
    "        constraints = [const.replace(v.name, str(v.varValue)) for const in constraints]\n",
    "        if v.varValue != 0:\n",
    "            print(v.name, \"=\", v.varValue)\n",
    "    print(div)\n",
    "    print(\"Constraints:\")\n",
    "    for constraint in constraints:\n",
    "        constraint_pretty = \" + \".join(re.findall(\"[0-9\\.]*\\*1.0\", constraint))\n",
    "        if constraint_pretty != \"\":\n",
    "            print(\"{} = {}\".format(constraint_pretty, eval(constraint_pretty)))\n",
    "    print(div)\n",
    "    print(\"Score:\")\n",
    "    score_pretty = \" + \".join(re.findall(\"[0-9\\.]+\\*1.0\", score))\n",
    "    print(\"{} = {}\".format(score_pretty, eval(score)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Variables:\n",
      "\n",
      "DST_Miami_Dolphins = 1.0\n",
      "FLEX_N'Keal_Harry = 1.0\n",
      "QB_Lamar_Jackson = 1.0\n",
      "RB_Alvin_Kamara = 1.0\n",
      "RB_Brian_Hill = 1.0\n",
      "TE_Vance_McDonald = 1.0\n",
      "WR_Julio_Jones = 1.0\n",
      "WR_Michael_Thomas = 1.0\n",
      "WR_N'Keal_Harry = 1.0\n",
      "---------------------------------------\n",
      "\n",
      "Constraints:\n",
      "2000*1.0 + 3300*1.0 + 7400*1.0 + 8200*1.0 + 4900*1.0 + 3500*1.0 + 8000*1.0 + 9300*1.0 + 3300*1.0 = 49900.0\n",
      "---------------------------------------\n",
      "\n",
      "Score:\n",
      "6.71*1.0 + 11.06*1.0 + 24.13*1.0 + 22.03*1.0 + 14.13*1.0 + 9.72*1.0 + 21.16*1.0 + 24.34*1.0 + 11.06*1.0 = 144.34\n"
     ]
    }
   ],
   "source": [
    "summary(prob)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
